Создание ПРОЕКТА Джанго
django-admin startproject web25 - имя проекта

Создание ВИРТУАЛЬНОЙ СРЕДЫ проекта
sudo apt install python3-virtualenv
virtualenv -p python3 venv
python3 -m virtualenv -p python3 venv
АКТИВАЦИЯ виртуальной среды проекта
. venv/bin/activate
ДЕАКТИВАЦИЯ виртуальной среды проекта
 deactivate

Установка пакета Джанго
pip install Django

Обновление пакета установки PIP
pip install --upgrade pip

Обновление пакета установки SETUPTOOLS
pip install --upgrade setuptools

Установка пакета для работы с POSTGRESQL
pip install psycopg2
или
pip install psycopg2-binary

Работа со списком ПАКЕТОВ проекта
Сохранение списка пакетов проекта в файл
pip freeze > requirements.txt
Установка списка пакетов из файла в новый проект
pip install -r requirements.txt

СОЗДАНИЕ МИГРАЦИЙ моделей базы данных проекта
python3 manage.py makemigrations

ИЗМЕНЕНИЕ ТАБЛИЦ базы данных в соответствии с миграциями
python3 manage.py migrate (appname)

(venv) ...$ ./manage.py makemigrations
(venv) ...$ ./manage.py migrate accounts

просмотреть таблицы и убедиться в их создании:
python3 manage.py dbshell

Создание СУПЕРПОЛЬЗОВАТЕЛЯ проекта
python3 manage.py createsuperuser

ФИКСТУРЫ
Фикстуры приложения webapp
из БД в dump.json (резервная копия данных БД)
python3 manage.py dumpdata webapp > fixtures/dump.json --indent=2
из dump.json в БД (восстановление данных БД из копии)
python3 manage.py loaddata fixtures/dump.json

Фикстуры авторизации accounts
из БД в auth.json (резервная копия данных БД)
python3 manage.py dumpdata --indent=2 --natural-foreign auth.user auth.group > fixtures/auth.json
или
./manage.py dumpdata --indent=2 --natural-foreign users auth.group > fixtures/auth.json
или
python3 manage.py dumpdata --indent=2 --natural-foreign accounts auth.group > fixtures/auth.json



из auth.json в БД (восстановление данных БД из копии)
python3 manage.py loaddata fixtures/auth.json

СОЗДАНИЕ
python3 manage.py runserver


ЗАМЕНЫ ПО ТЕКУЩЕМУ ПРОЕКТУ
30.04.23
Model Product, Field:

    good_in_stocks = models.ManyToManyField(
        verbose_name='Продукт в бутике',
        to=get_user_model(),
        related_name='has_products'
    )

ИЗМЕНЕНО НА:

    in_boutiques = models.ManyToManyField(
        to=get_user_model(),
        related_name='has_products',
        through='ProductInBoutique',   # Новая модель связывающая бутики и товары
        verbose_name='Товар в бутике'
    )

ДОБАВЛЕНА МОДЕЛЬ:


class ProductInBoutique(models.Model):
    boutique = models.ForeignKey(get_user_model(), on_delete=models.CASCADE)
    product = models.ForeignKey(Product, on_delete=models.CASCADE)
    price = models.DecimalField(max_digits=12, decimal_places=2, default=0.00, verbose_name='Цена товара в бутике')
    qty = models.PositiveIntegerField(default=0, verbose_name='Остаток товара в бутике')


root_bout
bout1@adem.kz
bout2@adem.kz
bout3@adem.kz
bout4@adem.kz
bout5@adem.kz

